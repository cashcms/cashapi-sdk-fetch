/* tslint:disable */
/* eslint-disable */
/**
 * Cash CMS API
 * Cash CMS API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@cashcms.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CashcmsAttachment,
  CashcmsCategory,
  CashcmsLoginParams,
  CashcmsLoginResponse,
  CashcmsMembership,
  CashcmsPagedResponseCashcmsPost,
  CashcmsPaymentMethod,
  CashcmsPost,
  CashcmsPostAttachmentRecord,
  CashcmsRegisterParams,
  CashcmsTag,
  CashcmsUploadCredits,
  CashcmsUser,
  EmaopayEmaopayOrder,
} from '../models/index';
import {
    CashcmsAttachmentFromJSON,
    CashcmsAttachmentToJSON,
    CashcmsCategoryFromJSON,
    CashcmsCategoryToJSON,
    CashcmsLoginParamsFromJSON,
    CashcmsLoginParamsToJSON,
    CashcmsLoginResponseFromJSON,
    CashcmsLoginResponseToJSON,
    CashcmsMembershipFromJSON,
    CashcmsMembershipToJSON,
    CashcmsPagedResponseCashcmsPostFromJSON,
    CashcmsPagedResponseCashcmsPostToJSON,
    CashcmsPaymentMethodFromJSON,
    CashcmsPaymentMethodToJSON,
    CashcmsPostFromJSON,
    CashcmsPostToJSON,
    CashcmsPostAttachmentRecordFromJSON,
    CashcmsPostAttachmentRecordToJSON,
    CashcmsRegisterParamsFromJSON,
    CashcmsRegisterParamsToJSON,
    CashcmsTagFromJSON,
    CashcmsTagToJSON,
    CashcmsUploadCreditsFromJSON,
    CashcmsUploadCreditsToJSON,
    CashcmsUserFromJSON,
    CashcmsUserToJSON,
    EmaopayEmaopayOrderFromJSON,
    EmaopayEmaopayOrderToJSON,
} from '../models/index';

export interface CreateAttachmentRequest {
    attachment: CashcmsAttachment;
}

export interface CreateCategoryRequest {
    category: CashcmsCategory;
}

export interface CreatePostRequest {
    post: CashcmsPost;
}

export interface CreateTagRequest {
    tag: CashcmsTag;
}

export interface DeleteAttachmentRequest {
    id: string;
}

export interface DeleteCategoryByIdRequest {
    id: string;
}

export interface DeletePostByIdRequest {
    id: string;
}

export interface DeleteTagByIdRequest {
    id: string;
}

export interface GetAttachmentDownloadTokenRequest {
    id: string;
}

export interface GetAttachmentsRequest {
    id: string;
}

export interface GetAttachmentsByAdminRequest {
    id: string;
}

export interface GetCategoryByIdRequest {
    name: string;
}

export interface GetMembershipOrderRequest {
    membership: string;
    paymentMethod?: string;
}

export interface GetPostByIdRequest {
    id: string;
}

export interface GetPostPagedListRequest {
    pageIndex: number;
    pageSize: number;
    categoryId?: string;
    category?: string;
    tag?: string;
}

export interface GetTagByIdRequest {
    id: string;
}

export interface GoAttachmentRequest {
    id: string;
    token: string;
}

export interface LoginRequest {
    params: CashcmsLoginParams;
}

export interface RegisterRequest {
    params: CashcmsRegisterParams;
}

export interface SubscribedRequest {
    order: EmaopayEmaopayOrder;
}

export interface UpdatePostRequest {
    id: string;
    post: CashcmsPost;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 创建附件
     * 创建附件
     */
    async createAttachmentRaw(requestParameters: CreateAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsAttachment>> {
        if (requestParameters['attachment'] == null) {
            throw new runtime.RequiredError(
                'attachment',
                'Required parameter "attachment" was null or undefined when calling createAttachment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/attachments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CashcmsAttachmentToJSON(requestParameters['attachment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsAttachmentFromJSON(jsonValue));
    }

    /**
     * 创建附件
     * 创建附件
     */
    async createAttachment(requestParameters: CreateAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsAttachment> {
        const response = await this.createAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建分类
     * 创建分类
     */
    async createCategoryRaw(requestParameters: CreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsCategory>> {
        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling createCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CashcmsCategoryToJSON(requestParameters['category']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsCategoryFromJSON(jsonValue));
    }

    /**
     * 创建分类
     * 创建分类
     */
    async createCategory(requestParameters: CreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsCategory> {
        const response = await this.createCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建新文章
     * 创建新文章
     */
    async createNewPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsPost>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/posts/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsPostFromJSON(jsonValue));
    }

    /**
     * 创建新文章
     * 创建新文章
     */
    async createNewPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsPost> {
        const response = await this.createNewPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * 创建文章
     * 创建文章
     */
    async createPostRaw(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsPost>> {
        if (requestParameters['post'] == null) {
            throw new runtime.RequiredError(
                'post',
                'Required parameter "post" was null or undefined when calling createPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/posts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CashcmsPostToJSON(requestParameters['post']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsPostFromJSON(jsonValue));
    }

    /**
     * 创建文章
     * 创建文章
     */
    async createPost(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsPost> {
        const response = await this.createPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建标签
     * 创建标签
     */
    async createTagRaw(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsTag>> {
        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling createTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CashcmsTagToJSON(requestParameters['tag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsTagFromJSON(jsonValue));
    }

    /**
     * 创建标签
     * 创建标签
     */
    async createTag(requestParameters: CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsTag> {
        const response = await this.createTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除附件
     * 删除附件
     */
    async deleteAttachmentRaw(requestParameters: DeleteAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteAttachment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/attachments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 删除附件
     * 删除附件
     */
    async deleteAttachment(requestParameters: DeleteAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAttachmentRaw(requestParameters, initOverrides);
    }

    /**
     * 删除分类
     * 删除分类
     */
    async deleteCategoryByIdRaw(requestParameters: DeleteCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteCategoryById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 删除分类
     * 删除分类
     */
    async deleteCategoryById(requestParameters: DeleteCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCategoryByIdRaw(requestParameters, initOverrides);
    }

    /**
     * 删除文章
     * 删除文章
     */
    async deletePostByIdRaw(requestParameters: DeletePostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePostById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 删除文章
     * 删除文章
     */
    async deletePostById(requestParameters: DeletePostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePostByIdRaw(requestParameters, initOverrides);
    }

    /**
     * 删除标签
     * 删除标签
     */
    async deleteTagByIdRaw(requestParameters: DeleteTagByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTagById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 删除标签
     * 删除标签
     */
    async deleteTagById(requestParameters: DeleteTagByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTagByIdRaw(requestParameters, initOverrides);
    }

    /**
     * 获取附件下载 Token
     * 获取附件下载 Token
     */
    async getAttachmentDownloadTokenRaw(requestParameters: GetAttachmentDownloadTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsPostAttachmentRecord>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAttachmentDownloadToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/attachments/{id}/token`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsPostAttachmentRecordFromJSON(jsonValue));
    }

    /**
     * 获取附件下载 Token
     * 获取附件下载 Token
     */
    async getAttachmentDownloadToken(requestParameters: GetAttachmentDownloadTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsPostAttachmentRecord> {
        const response = await this.getAttachmentDownloadTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取附件上传凭证
     * 获取附件上传凭证
     */
    async getAttachmentUploadCreditsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsUploadCredits>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/posts/attachment-upload-credits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsUploadCreditsFromJSON(jsonValue));
    }

    /**
     * 获取附件上传凭证
     * 获取附件上传凭证
     */
    async getAttachmentUploadCredits(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsUploadCredits> {
        const response = await this.getAttachmentUploadCreditsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 获取附件下载地址
     * 获取附件下载地址
     */
    async getAttachmentsRaw(requestParameters: GetAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CashcmsAttachment>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAttachments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/posts/{id}/attachments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CashcmsAttachmentFromJSON));
    }

    /**
     * 获取附件下载地址
     * 获取附件下载地址
     */
    async getAttachments(requestParameters: GetAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CashcmsAttachment>> {
        const response = await this.getAttachmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 管理员获取附件列表
     * 管理员获取附件列表
     */
    async getAttachmentsByAdminRaw(requestParameters: GetAttachmentsByAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CashcmsAttachment>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAttachmentsByAdmin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/posts/{id}/attachments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CashcmsAttachmentFromJSON));
    }

    /**
     * 管理员获取附件列表
     * 管理员获取附件列表
     */
    async getAttachmentsByAdmin(requestParameters: GetAttachmentsByAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CashcmsAttachment>> {
        const response = await this.getAttachmentsByAdminRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取分类
     * 获取分类
     */
    async getCategoryByIdRaw(requestParameters: GetCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsCategory>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getCategoryById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/categories/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsCategoryFromJSON(jsonValue));
    }

    /**
     * 获取分类
     * 获取分类
     */
    async getCategoryById(requestParameters: GetCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsCategory> {
        const response = await this.getCategoryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取分类列表
     * 获取分类列表
     */
    async getCategoryListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CashcmsCategory>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CashcmsCategoryFromJSON));
    }

    /**
     * 获取分类列表
     * 获取分类列表
     */
    async getCategoryList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CashcmsCategory>> {
        const response = await this.getCategoryListRaw(initOverrides);
        return await response.value();
    }

    /**
     * 获取封面上传凭证
     * 获取封面上传凭证
     */
    async getCoverUploadCreditsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsUploadCredits>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/posts/cover-upload-credits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsUploadCreditsFromJSON(jsonValue));
    }

    /**
     * 获取封面上传凭证
     * 获取封面上传凭证
     */
    async getCoverUploadCredits(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsUploadCredits> {
        const response = await this.getCoverUploadCreditsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 获取会员订阅订单
     * 获取会员订阅订单
     */
    async getMembershipOrderRaw(requestParameters: GetMembershipOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayEmaopayOrder>> {
        if (requestParameters['membership'] == null) {
            throw new runtime.RequiredError(
                'membership',
                'Required parameter "membership" was null or undefined when calling getMembershipOrder().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['membership'] != null) {
            queryParameters['membership'] = requestParameters['membership'];
        }

        if (requestParameters['paymentMethod'] != null) {
            queryParameters['paymentMethod'] = requestParameters['paymentMethod'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/memberships/order`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayEmaopayOrderFromJSON(jsonValue));
    }

    /**
     * 获取会员订阅订单
     * 获取会员订阅订单
     */
    async getMembershipOrder(requestParameters: GetMembershipOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayEmaopayOrder> {
        const response = await this.getMembershipOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取会员订阅计划
     * 获取会员订阅计划
     */
    async getMembershipsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CashcmsMembership>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/memberships`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CashcmsMembershipFromJSON));
    }

    /**
     * 获取会员订阅计划
     * 获取会员订阅计划
     */
    async getMemberships(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CashcmsMembership>> {
        const response = await this.getMembershipsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 获取支持的支付方式
     * 获取支持的支付方式
     */
    async getPaymentMethodsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CashcmsPaymentMethod>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/memberships/paymentMethods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CashcmsPaymentMethodFromJSON));
    }

    /**
     * 获取支持的支付方式
     * 获取支持的支付方式
     */
    async getPaymentMethods(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CashcmsPaymentMethod>> {
        const response = await this.getPaymentMethodsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 获取文章
     * 获取文章
     */
    async getPostByIdRaw(requestParameters: GetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsPost>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPostById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsPostFromJSON(jsonValue));
    }

    /**
     * 获取文章
     * 获取文章
     */
    async getPostById(requestParameters: GetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsPost> {
        const response = await this.getPostByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取文章列表
     * 获取文章列表
     */
    async getPostPagedListRaw(requestParameters: GetPostPagedListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsPagedResponseCashcmsPost>> {
        if (requestParameters['pageIndex'] == null) {
            throw new runtime.RequiredError(
                'pageIndex',
                'Required parameter "pageIndex" was null or undefined when calling getPostPagedList().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling getPostPagedList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['categoryId'] != null) {
            queryParameters['categoryId'] = requestParameters['categoryId'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsPagedResponseCashcmsPostFromJSON(jsonValue));
    }

    /**
     * 获取文章列表
     * 获取文章列表
     */
    async getPostPagedList(requestParameters: GetPostPagedListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsPagedResponseCashcmsPost> {
        const response = await this.getPostPagedListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取标签信息
     * 获取标签信息
     */
    async getTagByIdRaw(requestParameters: GetTagByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsTag>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTagById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsTagFromJSON(jsonValue));
    }

    /**
     * 获取标签信息
     * 获取标签信息
     */
    async getTagById(requestParameters: GetTagByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsTag> {
        const response = await this.getTagByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取标签列表
     * 获取标签列表
     */
    async getTagListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CashcmsTag>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CashcmsTagFromJSON));
    }

    /**
     * 获取标签列表
     * 获取标签列表
     */
    async getTagList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CashcmsTag>> {
        const response = await this.getTagListRaw(initOverrides);
        return await response.value();
    }

    /**
     * 获取用户信息
     * 获取用户信息
     */
    async getUserInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsUserFromJSON(jsonValue));
    }

    /**
     * 获取用户信息
     * 获取用户信息
     */
    async getUserInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsUser> {
        const response = await this.getUserInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * 下载附件
     * 下载附件
     */
    async goAttachmentRaw(requestParameters: GoAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling goAttachment().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling goAttachment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/attachments/go/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 下载附件
     * 下载附件
     */
    async goAttachment(requestParameters: GoAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.goAttachmentRaw(requestParameters, initOverrides);
    }

    /**
     * 登录
     * 登录
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsLoginResponse>> {
        if (requestParameters['params'] == null) {
            throw new runtime.RequiredError(
                'params',
                'Required parameter "params" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CashcmsLoginParamsToJSON(requestParameters['params']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsLoginResponseFromJSON(jsonValue));
    }

    /**
     * 登录
     * 登录
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsLoginResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 注册
     * 注册
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['params'] == null) {
            throw new runtime.RequiredError(
                'params',
                'Required parameter "params" was null or undefined when calling register().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CashcmsRegisterParamsToJSON(requestParameters['params']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 注册
     * 注册
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerRaw(requestParameters, initOverrides);
    }

    /**
     * 订阅通知回调
     * 订阅通知回调
     */
    async subscribedRaw(requestParameters: SubscribedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmaopayEmaopayOrder>> {
        if (requestParameters['order'] == null) {
            throw new runtime.RequiredError(
                'order',
                'Required parameter "order" was null or undefined when calling subscribed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/memberships/subscribed`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmaopayEmaopayOrderToJSON(requestParameters['order']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmaopayEmaopayOrderFromJSON(jsonValue));
    }

    /**
     * 订阅通知回调
     * 订阅通知回调
     */
    async subscribed(requestParameters: SubscribedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmaopayEmaopayOrder> {
        const response = await this.subscribedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新文章
     * 更新文章
     */
    async updatePostRaw(requestParameters: UpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashcmsPost>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePost().'
            );
        }

        if (requestParameters['post'] == null) {
            throw new runtime.RequiredError(
                'post',
                'Required parameter "post" was null or undefined when calling updatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CashcmsPostToJSON(requestParameters['post']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashcmsPostFromJSON(jsonValue));
    }

    /**
     * 更新文章
     * 更新文章
     */
    async updatePost(requestParameters: UpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashcmsPost> {
        const response = await this.updatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
